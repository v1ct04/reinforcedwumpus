/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2015-11-12")
public class GameInit implements org.apache.thrift.TBase<GameInit, GameInit._Fields>, java.io.Serializable, Cloneable, Comparable<GameInit> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("GameInit");

  private static final org.apache.thrift.protocol.TField GAME_INFO_FIELD_DESC = new org.apache.thrift.protocol.TField("gameInfo", org.apache.thrift.protocol.TType.STRUCT, (short)1);
  private static final org.apache.thrift.protocol.TField GAME_DESCRIPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("gameDescription", org.apache.thrift.protocol.TType.STRUCT, (short)2);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new GameInitStandardSchemeFactory());
    schemes.put(TupleScheme.class, new GameInitTupleSchemeFactory());
  }

  public GameInfo gameInfo; // required
  public GameDescription gameDescription; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    GAME_INFO((short)1, "gameInfo"),
    GAME_DESCRIPTION((short)2, "gameDescription");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // GAME_INFO
          return GAME_INFO;
        case 2: // GAME_DESCRIPTION
          return GAME_DESCRIPTION;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.GAME_INFO, new org.apache.thrift.meta_data.FieldMetaData("gameInfo", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, GameInfo.class)));
    tmpMap.put(_Fields.GAME_DESCRIPTION, new org.apache.thrift.meta_data.FieldMetaData("gameDescription", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, GameDescription.class)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(GameInit.class, metaDataMap);
  }

  public GameInit() {
  }

  public GameInit(
    GameInfo gameInfo,
    GameDescription gameDescription)
  {
    this();
    this.gameInfo = gameInfo;
    this.gameDescription = gameDescription;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public GameInit(GameInit other) {
    if (other.isSetGameInfo()) {
      this.gameInfo = new GameInfo(other.gameInfo);
    }
    if (other.isSetGameDescription()) {
      this.gameDescription = new GameDescription(other.gameDescription);
    }
  }

  public GameInit deepCopy() {
    return new GameInit(this);
  }

  @Override
  public void clear() {
    this.gameInfo = null;
    this.gameDescription = null;
  }

  public GameInfo getGameInfo() {
    return this.gameInfo;
  }

  public GameInit setGameInfo(GameInfo gameInfo) {
    this.gameInfo = gameInfo;
    return this;
  }

  public void unsetGameInfo() {
    this.gameInfo = null;
  }

  /** Returns true if field gameInfo is set (has been assigned a value) and false otherwise */
  public boolean isSetGameInfo() {
    return this.gameInfo != null;
  }

  public void setGameInfoIsSet(boolean value) {
    if (!value) {
      this.gameInfo = null;
    }
  }

  public GameDescription getGameDescription() {
    return this.gameDescription;
  }

  public GameInit setGameDescription(GameDescription gameDescription) {
    this.gameDescription = gameDescription;
    return this;
  }

  public void unsetGameDescription() {
    this.gameDescription = null;
  }

  /** Returns true if field gameDescription is set (has been assigned a value) and false otherwise */
  public boolean isSetGameDescription() {
    return this.gameDescription != null;
  }

  public void setGameDescriptionIsSet(boolean value) {
    if (!value) {
      this.gameDescription = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case GAME_INFO:
      if (value == null) {
        unsetGameInfo();
      } else {
        setGameInfo((GameInfo)value);
      }
      break;

    case GAME_DESCRIPTION:
      if (value == null) {
        unsetGameDescription();
      } else {
        setGameDescription((GameDescription)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case GAME_INFO:
      return getGameInfo();

    case GAME_DESCRIPTION:
      return getGameDescription();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case GAME_INFO:
      return isSetGameInfo();
    case GAME_DESCRIPTION:
      return isSetGameDescription();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof GameInit)
      return this.equals((GameInit)that);
    return false;
  }

  public boolean equals(GameInit that) {
    if (that == null)
      return false;

    boolean this_present_gameInfo = true && this.isSetGameInfo();
    boolean that_present_gameInfo = true && that.isSetGameInfo();
    if (this_present_gameInfo || that_present_gameInfo) {
      if (!(this_present_gameInfo && that_present_gameInfo))
        return false;
      if (!this.gameInfo.equals(that.gameInfo))
        return false;
    }

    boolean this_present_gameDescription = true && this.isSetGameDescription();
    boolean that_present_gameDescription = true && that.isSetGameDescription();
    if (this_present_gameDescription || that_present_gameDescription) {
      if (!(this_present_gameDescription && that_present_gameDescription))
        return false;
      if (!this.gameDescription.equals(that.gameDescription))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_gameInfo = true && (isSetGameInfo());
    list.add(present_gameInfo);
    if (present_gameInfo)
      list.add(gameInfo);

    boolean present_gameDescription = true && (isSetGameDescription());
    list.add(present_gameDescription);
    if (present_gameDescription)
      list.add(gameDescription);

    return list.hashCode();
  }

  @Override
  public int compareTo(GameInit other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetGameInfo()).compareTo(other.isSetGameInfo());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetGameInfo()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.gameInfo, other.gameInfo);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetGameDescription()).compareTo(other.isSetGameDescription());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetGameDescription()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.gameDescription, other.gameDescription);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("GameInit(");
    boolean first = true;

    sb.append("gameInfo:");
    if (this.gameInfo == null) {
      sb.append("null");
    } else {
      sb.append(this.gameInfo);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("gameDescription:");
    if (this.gameDescription == null) {
      sb.append("null");
    } else {
      sb.append(this.gameDescription);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (gameInfo == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'gameInfo' was not present! Struct: " + toString());
    }
    if (gameDescription == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'gameDescription' was not present! Struct: " + toString());
    }
    // check for sub-struct validity
    if (gameInfo != null) {
      gameInfo.validate();
    }
    if (gameDescription != null) {
      gameDescription.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class GameInitStandardSchemeFactory implements SchemeFactory {
    public GameInitStandardScheme getScheme() {
      return new GameInitStandardScheme();
    }
  }

  private static class GameInitStandardScheme extends StandardScheme<GameInit> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, GameInit struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // GAME_INFO
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.gameInfo = new GameInfo();
              struct.gameInfo.read(iprot);
              struct.setGameInfoIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // GAME_DESCRIPTION
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.gameDescription = new GameDescription();
              struct.gameDescription.read(iprot);
              struct.setGameDescriptionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, GameInit struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.gameInfo != null) {
        oprot.writeFieldBegin(GAME_INFO_FIELD_DESC);
        struct.gameInfo.write(oprot);
        oprot.writeFieldEnd();
      }
      if (struct.gameDescription != null) {
        oprot.writeFieldBegin(GAME_DESCRIPTION_FIELD_DESC);
        struct.gameDescription.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class GameInitTupleSchemeFactory implements SchemeFactory {
    public GameInitTupleScheme getScheme() {
      return new GameInitTupleScheme();
    }
  }

  private static class GameInitTupleScheme extends TupleScheme<GameInit> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, GameInit struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      struct.gameInfo.write(oprot);
      struct.gameDescription.write(oprot);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, GameInit struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.gameInfo = new GameInfo();
      struct.gameInfo.read(iprot);
      struct.setGameInfoIsSet(true);
      struct.gameDescription = new GameDescription();
      struct.gameDescription.read(iprot);
      struct.setGameDescriptionIsSet(true);
    }
  }

}

