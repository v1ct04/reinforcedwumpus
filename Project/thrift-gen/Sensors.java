/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2015-11-12")
public class Sensors implements org.apache.thrift.TBase<Sensors, Sensors._Fields>, java.io.Serializable, Cloneable, Comparable<Sensors> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Sensors");

  private static final org.apache.thrift.protocol.TField BREEZE_FIELD_DESC = new org.apache.thrift.protocol.TField("breeze", org.apache.thrift.protocol.TType.BOOL, (short)1);
  private static final org.apache.thrift.protocol.TField STENCH_FIELD_DESC = new org.apache.thrift.protocol.TField("stench", org.apache.thrift.protocol.TType.BOOL, (short)2);
  private static final org.apache.thrift.protocol.TField GLITTER_FIELD_DESC = new org.apache.thrift.protocol.TField("glitter", org.apache.thrift.protocol.TType.BOOL, (short)3);
  private static final org.apache.thrift.protocol.TField BUMP_FIELD_DESC = new org.apache.thrift.protocol.TField("bump", org.apache.thrift.protocol.TType.BOOL, (short)4);
  private static final org.apache.thrift.protocol.TField SCREAM_FIELD_DESC = new org.apache.thrift.protocol.TField("scream", org.apache.thrift.protocol.TType.BOOL, (short)5);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new SensorsStandardSchemeFactory());
    schemes.put(TupleScheme.class, new SensorsTupleSchemeFactory());
  }

  public boolean breeze; // required
  public boolean stench; // required
  public boolean glitter; // required
  public boolean bump; // required
  public boolean scream; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    BREEZE((short)1, "breeze"),
    STENCH((short)2, "stench"),
    GLITTER((short)3, "glitter"),
    BUMP((short)4, "bump"),
    SCREAM((short)5, "scream");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // BREEZE
          return BREEZE;
        case 2: // STENCH
          return STENCH;
        case 3: // GLITTER
          return GLITTER;
        case 4: // BUMP
          return BUMP;
        case 5: // SCREAM
          return SCREAM;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __BREEZE_ISSET_ID = 0;
  private static final int __STENCH_ISSET_ID = 1;
  private static final int __GLITTER_ISSET_ID = 2;
  private static final int __BUMP_ISSET_ID = 3;
  private static final int __SCREAM_ISSET_ID = 4;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.BREEZE, new org.apache.thrift.meta_data.FieldMetaData("breeze", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.STENCH, new org.apache.thrift.meta_data.FieldMetaData("stench", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.GLITTER, new org.apache.thrift.meta_data.FieldMetaData("glitter", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.BUMP, new org.apache.thrift.meta_data.FieldMetaData("bump", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.SCREAM, new org.apache.thrift.meta_data.FieldMetaData("scream", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Sensors.class, metaDataMap);
  }

  public Sensors() {
    this.breeze = false;

    this.stench = false;

    this.glitter = false;

    this.bump = false;

    this.scream = false;

  }

  public Sensors(
    boolean breeze,
    boolean stench,
    boolean glitter,
    boolean bump,
    boolean scream)
  {
    this();
    this.breeze = breeze;
    setBreezeIsSet(true);
    this.stench = stench;
    setStenchIsSet(true);
    this.glitter = glitter;
    setGlitterIsSet(true);
    this.bump = bump;
    setBumpIsSet(true);
    this.scream = scream;
    setScreamIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public Sensors(Sensors other) {
    __isset_bitfield = other.__isset_bitfield;
    this.breeze = other.breeze;
    this.stench = other.stench;
    this.glitter = other.glitter;
    this.bump = other.bump;
    this.scream = other.scream;
  }

  public Sensors deepCopy() {
    return new Sensors(this);
  }

  @Override
  public void clear() {
    this.breeze = false;

    this.stench = false;

    this.glitter = false;

    this.bump = false;

    this.scream = false;

  }

  public boolean isBreeze() {
    return this.breeze;
  }

  public Sensors setBreeze(boolean breeze) {
    this.breeze = breeze;
    setBreezeIsSet(true);
    return this;
  }

  public void unsetBreeze() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __BREEZE_ISSET_ID);
  }

  /** Returns true if field breeze is set (has been assigned a value) and false otherwise */
  public boolean isSetBreeze() {
    return EncodingUtils.testBit(__isset_bitfield, __BREEZE_ISSET_ID);
  }

  public void setBreezeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __BREEZE_ISSET_ID, value);
  }

  public boolean isStench() {
    return this.stench;
  }

  public Sensors setStench(boolean stench) {
    this.stench = stench;
    setStenchIsSet(true);
    return this;
  }

  public void unsetStench() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __STENCH_ISSET_ID);
  }

  /** Returns true if field stench is set (has been assigned a value) and false otherwise */
  public boolean isSetStench() {
    return EncodingUtils.testBit(__isset_bitfield, __STENCH_ISSET_ID);
  }

  public void setStenchIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __STENCH_ISSET_ID, value);
  }

  public boolean isGlitter() {
    return this.glitter;
  }

  public Sensors setGlitter(boolean glitter) {
    this.glitter = glitter;
    setGlitterIsSet(true);
    return this;
  }

  public void unsetGlitter() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __GLITTER_ISSET_ID);
  }

  /** Returns true if field glitter is set (has been assigned a value) and false otherwise */
  public boolean isSetGlitter() {
    return EncodingUtils.testBit(__isset_bitfield, __GLITTER_ISSET_ID);
  }

  public void setGlitterIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __GLITTER_ISSET_ID, value);
  }

  public boolean isBump() {
    return this.bump;
  }

  public Sensors setBump(boolean bump) {
    this.bump = bump;
    setBumpIsSet(true);
    return this;
  }

  public void unsetBump() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __BUMP_ISSET_ID);
  }

  /** Returns true if field bump is set (has been assigned a value) and false otherwise */
  public boolean isSetBump() {
    return EncodingUtils.testBit(__isset_bitfield, __BUMP_ISSET_ID);
  }

  public void setBumpIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __BUMP_ISSET_ID, value);
  }

  public boolean isScream() {
    return this.scream;
  }

  public Sensors setScream(boolean scream) {
    this.scream = scream;
    setScreamIsSet(true);
    return this;
  }

  public void unsetScream() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SCREAM_ISSET_ID);
  }

  /** Returns true if field scream is set (has been assigned a value) and false otherwise */
  public boolean isSetScream() {
    return EncodingUtils.testBit(__isset_bitfield, __SCREAM_ISSET_ID);
  }

  public void setScreamIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SCREAM_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case BREEZE:
      if (value == null) {
        unsetBreeze();
      } else {
        setBreeze((Boolean)value);
      }
      break;

    case STENCH:
      if (value == null) {
        unsetStench();
      } else {
        setStench((Boolean)value);
      }
      break;

    case GLITTER:
      if (value == null) {
        unsetGlitter();
      } else {
        setGlitter((Boolean)value);
      }
      break;

    case BUMP:
      if (value == null) {
        unsetBump();
      } else {
        setBump((Boolean)value);
      }
      break;

    case SCREAM:
      if (value == null) {
        unsetScream();
      } else {
        setScream((Boolean)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case BREEZE:
      return Boolean.valueOf(isBreeze());

    case STENCH:
      return Boolean.valueOf(isStench());

    case GLITTER:
      return Boolean.valueOf(isGlitter());

    case BUMP:
      return Boolean.valueOf(isBump());

    case SCREAM:
      return Boolean.valueOf(isScream());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case BREEZE:
      return isSetBreeze();
    case STENCH:
      return isSetStench();
    case GLITTER:
      return isSetGlitter();
    case BUMP:
      return isSetBump();
    case SCREAM:
      return isSetScream();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof Sensors)
      return this.equals((Sensors)that);
    return false;
  }

  public boolean equals(Sensors that) {
    if (that == null)
      return false;

    boolean this_present_breeze = true;
    boolean that_present_breeze = true;
    if (this_present_breeze || that_present_breeze) {
      if (!(this_present_breeze && that_present_breeze))
        return false;
      if (this.breeze != that.breeze)
        return false;
    }

    boolean this_present_stench = true;
    boolean that_present_stench = true;
    if (this_present_stench || that_present_stench) {
      if (!(this_present_stench && that_present_stench))
        return false;
      if (this.stench != that.stench)
        return false;
    }

    boolean this_present_glitter = true;
    boolean that_present_glitter = true;
    if (this_present_glitter || that_present_glitter) {
      if (!(this_present_glitter && that_present_glitter))
        return false;
      if (this.glitter != that.glitter)
        return false;
    }

    boolean this_present_bump = true;
    boolean that_present_bump = true;
    if (this_present_bump || that_present_bump) {
      if (!(this_present_bump && that_present_bump))
        return false;
      if (this.bump != that.bump)
        return false;
    }

    boolean this_present_scream = true;
    boolean that_present_scream = true;
    if (this_present_scream || that_present_scream) {
      if (!(this_present_scream && that_present_scream))
        return false;
      if (this.scream != that.scream)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_breeze = true;
    list.add(present_breeze);
    if (present_breeze)
      list.add(breeze);

    boolean present_stench = true;
    list.add(present_stench);
    if (present_stench)
      list.add(stench);

    boolean present_glitter = true;
    list.add(present_glitter);
    if (present_glitter)
      list.add(glitter);

    boolean present_bump = true;
    list.add(present_bump);
    if (present_bump)
      list.add(bump);

    boolean present_scream = true;
    list.add(present_scream);
    if (present_scream)
      list.add(scream);

    return list.hashCode();
  }

  @Override
  public int compareTo(Sensors other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetBreeze()).compareTo(other.isSetBreeze());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBreeze()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.breeze, other.breeze);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStench()).compareTo(other.isSetStench());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStench()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.stench, other.stench);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetGlitter()).compareTo(other.isSetGlitter());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetGlitter()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.glitter, other.glitter);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBump()).compareTo(other.isSetBump());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBump()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bump, other.bump);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetScream()).compareTo(other.isSetScream());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetScream()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.scream, other.scream);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("Sensors(");
    boolean first = true;

    sb.append("breeze:");
    sb.append(this.breeze);
    first = false;
    if (!first) sb.append(", ");
    sb.append("stench:");
    sb.append(this.stench);
    first = false;
    if (!first) sb.append(", ");
    sb.append("glitter:");
    sb.append(this.glitter);
    first = false;
    if (!first) sb.append(", ");
    sb.append("bump:");
    sb.append(this.bump);
    first = false;
    if (!first) sb.append(", ");
    sb.append("scream:");
    sb.append(this.scream);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // alas, we cannot check 'breeze' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'stench' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'glitter' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'bump' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'scream' because it's a primitive and you chose the non-beans generator.
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class SensorsStandardSchemeFactory implements SchemeFactory {
    public SensorsStandardScheme getScheme() {
      return new SensorsStandardScheme();
    }
  }

  private static class SensorsStandardScheme extends StandardScheme<Sensors> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, Sensors struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // BREEZE
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.breeze = iprot.readBool();
              struct.setBreezeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // STENCH
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.stench = iprot.readBool();
              struct.setStenchIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // GLITTER
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.glitter = iprot.readBool();
              struct.setGlitterIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // BUMP
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.bump = iprot.readBool();
              struct.setBumpIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // SCREAM
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.scream = iprot.readBool();
              struct.setScreamIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      if (!struct.isSetBreeze()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'breeze' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetStench()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'stench' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetGlitter()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'glitter' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetBump()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'bump' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetScream()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'scream' was not found in serialized data! Struct: " + toString());
      }
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, Sensors struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(BREEZE_FIELD_DESC);
      oprot.writeBool(struct.breeze);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(STENCH_FIELD_DESC);
      oprot.writeBool(struct.stench);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(GLITTER_FIELD_DESC);
      oprot.writeBool(struct.glitter);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(BUMP_FIELD_DESC);
      oprot.writeBool(struct.bump);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(SCREAM_FIELD_DESC);
      oprot.writeBool(struct.scream);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class SensorsTupleSchemeFactory implements SchemeFactory {
    public SensorsTupleScheme getScheme() {
      return new SensorsTupleScheme();
    }
  }

  private static class SensorsTupleScheme extends TupleScheme<Sensors> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, Sensors struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      oprot.writeBool(struct.breeze);
      oprot.writeBool(struct.stench);
      oprot.writeBool(struct.glitter);
      oprot.writeBool(struct.bump);
      oprot.writeBool(struct.scream);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, Sensors struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.breeze = iprot.readBool();
      struct.setBreezeIsSet(true);
      struct.stench = iprot.readBool();
      struct.setStenchIsSet(true);
      struct.glitter = iprot.readBool();
      struct.setGlitterIsSet(true);
      struct.bump = iprot.readBool();
      struct.setBumpIsSet(true);
      struct.scream = iprot.readBool();
      struct.setScreamIsSet(true);
    }
  }

}

