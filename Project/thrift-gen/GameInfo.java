/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2015-11-12")
public class GameInfo implements org.apache.thrift.TBase<GameInfo, GameInfo._Fields>, java.io.Serializable, Cloneable, Comparable<GameInfo> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("GameInfo");

  private static final org.apache.thrift.protocol.TField GAME_STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField("gameStatus", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField WORLD_MODEL_FIELD_DESC = new org.apache.thrift.protocol.TField("worldModel", org.apache.thrift.protocol.TType.STRUCT, (short)2);
  private static final org.apache.thrift.protocol.TField CYCLE_FIELD_DESC = new org.apache.thrift.protocol.TField("cycle", org.apache.thrift.protocol.TType.I32, (short)3);
  private static final org.apache.thrift.protocol.TField UPDATE_TIME_LIMIT_MS_FIELD_DESC = new org.apache.thrift.protocol.TField("updateTimeLimitMs", org.apache.thrift.protocol.TType.I32, (short)4);
  private static final org.apache.thrift.protocol.TField NEXT_WORLD_MODEL_TIME_ESTIMATE_MS_FIELD_DESC = new org.apache.thrift.protocol.TField("nextWorldModelTimeEstimateMs", org.apache.thrift.protocol.TType.I32, (short)5);
  private static final org.apache.thrift.protocol.TField IS_MY_TURN_FIELD_DESC = new org.apache.thrift.protocol.TField("isMyTurn", org.apache.thrift.protocol.TType.BOOL, (short)6);
  private static final org.apache.thrift.protocol.TField GAME_RESULT_FIELD_DESC = new org.apache.thrift.protocol.TField("gameResult", org.apache.thrift.protocol.TType.STRUCT, (short)7);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new GameInfoStandardSchemeFactory());
    schemes.put(TupleScheme.class, new GameInfoTupleSchemeFactory());
  }

  /**
   * 
   * @see GameStatus
   */
  public GameStatus gameStatus; // required
  public WorldModel worldModel; // required
  public int cycle; // required
  public int updateTimeLimitMs; // required
  public int nextWorldModelTimeEstimateMs; // required
  public boolean isMyTurn; // required
  public GameResult gameResult; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    /**
     * 
     * @see GameStatus
     */
    GAME_STATUS((short)1, "gameStatus"),
    WORLD_MODEL((short)2, "worldModel"),
    CYCLE((short)3, "cycle"),
    UPDATE_TIME_LIMIT_MS((short)4, "updateTimeLimitMs"),
    NEXT_WORLD_MODEL_TIME_ESTIMATE_MS((short)5, "nextWorldModelTimeEstimateMs"),
    IS_MY_TURN((short)6, "isMyTurn"),
    GAME_RESULT((short)7, "gameResult");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // GAME_STATUS
          return GAME_STATUS;
        case 2: // WORLD_MODEL
          return WORLD_MODEL;
        case 3: // CYCLE
          return CYCLE;
        case 4: // UPDATE_TIME_LIMIT_MS
          return UPDATE_TIME_LIMIT_MS;
        case 5: // NEXT_WORLD_MODEL_TIME_ESTIMATE_MS
          return NEXT_WORLD_MODEL_TIME_ESTIMATE_MS;
        case 6: // IS_MY_TURN
          return IS_MY_TURN;
        case 7: // GAME_RESULT
          return GAME_RESULT;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __CYCLE_ISSET_ID = 0;
  private static final int __UPDATETIMELIMITMS_ISSET_ID = 1;
  private static final int __NEXTWORLDMODELTIMEESTIMATEMS_ISSET_ID = 2;
  private static final int __ISMYTURN_ISSET_ID = 3;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.GAME_STATUS, new org.apache.thrift.meta_data.FieldMetaData("gameStatus", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, GameStatus.class)));
    tmpMap.put(_Fields.WORLD_MODEL, new org.apache.thrift.meta_data.FieldMetaData("worldModel", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, WorldModel.class)));
    tmpMap.put(_Fields.CYCLE, new org.apache.thrift.meta_data.FieldMetaData("cycle", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.UPDATE_TIME_LIMIT_MS, new org.apache.thrift.meta_data.FieldMetaData("updateTimeLimitMs", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.NEXT_WORLD_MODEL_TIME_ESTIMATE_MS, new org.apache.thrift.meta_data.FieldMetaData("nextWorldModelTimeEstimateMs", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.IS_MY_TURN, new org.apache.thrift.meta_data.FieldMetaData("isMyTurn", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.GAME_RESULT, new org.apache.thrift.meta_data.FieldMetaData("gameResult", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, GameResult.class)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(GameInfo.class, metaDataMap);
  }

  public GameInfo() {
  }

  public GameInfo(
    GameStatus gameStatus,
    WorldModel worldModel,
    int cycle,
    int updateTimeLimitMs,
    int nextWorldModelTimeEstimateMs,
    boolean isMyTurn,
    GameResult gameResult)
  {
    this();
    this.gameStatus = gameStatus;
    this.worldModel = worldModel;
    this.cycle = cycle;
    setCycleIsSet(true);
    this.updateTimeLimitMs = updateTimeLimitMs;
    setUpdateTimeLimitMsIsSet(true);
    this.nextWorldModelTimeEstimateMs = nextWorldModelTimeEstimateMs;
    setNextWorldModelTimeEstimateMsIsSet(true);
    this.isMyTurn = isMyTurn;
    setIsMyTurnIsSet(true);
    this.gameResult = gameResult;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public GameInfo(GameInfo other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetGameStatus()) {
      this.gameStatus = other.gameStatus;
    }
    if (other.isSetWorldModel()) {
      this.worldModel = new WorldModel(other.worldModel);
    }
    this.cycle = other.cycle;
    this.updateTimeLimitMs = other.updateTimeLimitMs;
    this.nextWorldModelTimeEstimateMs = other.nextWorldModelTimeEstimateMs;
    this.isMyTurn = other.isMyTurn;
    if (other.isSetGameResult()) {
      this.gameResult = new GameResult(other.gameResult);
    }
  }

  public GameInfo deepCopy() {
    return new GameInfo(this);
  }

  @Override
  public void clear() {
    this.gameStatus = null;
    this.worldModel = null;
    setCycleIsSet(false);
    this.cycle = 0;
    setUpdateTimeLimitMsIsSet(false);
    this.updateTimeLimitMs = 0;
    setNextWorldModelTimeEstimateMsIsSet(false);
    this.nextWorldModelTimeEstimateMs = 0;
    setIsMyTurnIsSet(false);
    this.isMyTurn = false;
    this.gameResult = null;
  }

  /**
   * 
   * @see GameStatus
   */
  public GameStatus getGameStatus() {
    return this.gameStatus;
  }

  /**
   * 
   * @see GameStatus
   */
  public GameInfo setGameStatus(GameStatus gameStatus) {
    this.gameStatus = gameStatus;
    return this;
  }

  public void unsetGameStatus() {
    this.gameStatus = null;
  }

  /** Returns true if field gameStatus is set (has been assigned a value) and false otherwise */
  public boolean isSetGameStatus() {
    return this.gameStatus != null;
  }

  public void setGameStatusIsSet(boolean value) {
    if (!value) {
      this.gameStatus = null;
    }
  }

  public WorldModel getWorldModel() {
    return this.worldModel;
  }

  public GameInfo setWorldModel(WorldModel worldModel) {
    this.worldModel = worldModel;
    return this;
  }

  public void unsetWorldModel() {
    this.worldModel = null;
  }

  /** Returns true if field worldModel is set (has been assigned a value) and false otherwise */
  public boolean isSetWorldModel() {
    return this.worldModel != null;
  }

  public void setWorldModelIsSet(boolean value) {
    if (!value) {
      this.worldModel = null;
    }
  }

  public int getCycle() {
    return this.cycle;
  }

  public GameInfo setCycle(int cycle) {
    this.cycle = cycle;
    setCycleIsSet(true);
    return this;
  }

  public void unsetCycle() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CYCLE_ISSET_ID);
  }

  /** Returns true if field cycle is set (has been assigned a value) and false otherwise */
  public boolean isSetCycle() {
    return EncodingUtils.testBit(__isset_bitfield, __CYCLE_ISSET_ID);
  }

  public void setCycleIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CYCLE_ISSET_ID, value);
  }

  public int getUpdateTimeLimitMs() {
    return this.updateTimeLimitMs;
  }

  public GameInfo setUpdateTimeLimitMs(int updateTimeLimitMs) {
    this.updateTimeLimitMs = updateTimeLimitMs;
    setUpdateTimeLimitMsIsSet(true);
    return this;
  }

  public void unsetUpdateTimeLimitMs() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __UPDATETIMELIMITMS_ISSET_ID);
  }

  /** Returns true if field updateTimeLimitMs is set (has been assigned a value) and false otherwise */
  public boolean isSetUpdateTimeLimitMs() {
    return EncodingUtils.testBit(__isset_bitfield, __UPDATETIMELIMITMS_ISSET_ID);
  }

  public void setUpdateTimeLimitMsIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __UPDATETIMELIMITMS_ISSET_ID, value);
  }

  public int getNextWorldModelTimeEstimateMs() {
    return this.nextWorldModelTimeEstimateMs;
  }

  public GameInfo setNextWorldModelTimeEstimateMs(int nextWorldModelTimeEstimateMs) {
    this.nextWorldModelTimeEstimateMs = nextWorldModelTimeEstimateMs;
    setNextWorldModelTimeEstimateMsIsSet(true);
    return this;
  }

  public void unsetNextWorldModelTimeEstimateMs() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __NEXTWORLDMODELTIMEESTIMATEMS_ISSET_ID);
  }

  /** Returns true if field nextWorldModelTimeEstimateMs is set (has been assigned a value) and false otherwise */
  public boolean isSetNextWorldModelTimeEstimateMs() {
    return EncodingUtils.testBit(__isset_bitfield, __NEXTWORLDMODELTIMEESTIMATEMS_ISSET_ID);
  }

  public void setNextWorldModelTimeEstimateMsIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __NEXTWORLDMODELTIMEESTIMATEMS_ISSET_ID, value);
  }

  public boolean isIsMyTurn() {
    return this.isMyTurn;
  }

  public GameInfo setIsMyTurn(boolean isMyTurn) {
    this.isMyTurn = isMyTurn;
    setIsMyTurnIsSet(true);
    return this;
  }

  public void unsetIsMyTurn() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ISMYTURN_ISSET_ID);
  }

  /** Returns true if field isMyTurn is set (has been assigned a value) and false otherwise */
  public boolean isSetIsMyTurn() {
    return EncodingUtils.testBit(__isset_bitfield, __ISMYTURN_ISSET_ID);
  }

  public void setIsMyTurnIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ISMYTURN_ISSET_ID, value);
  }

  public GameResult getGameResult() {
    return this.gameResult;
  }

  public GameInfo setGameResult(GameResult gameResult) {
    this.gameResult = gameResult;
    return this;
  }

  public void unsetGameResult() {
    this.gameResult = null;
  }

  /** Returns true if field gameResult is set (has been assigned a value) and false otherwise */
  public boolean isSetGameResult() {
    return this.gameResult != null;
  }

  public void setGameResultIsSet(boolean value) {
    if (!value) {
      this.gameResult = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case GAME_STATUS:
      if (value == null) {
        unsetGameStatus();
      } else {
        setGameStatus((GameStatus)value);
      }
      break;

    case WORLD_MODEL:
      if (value == null) {
        unsetWorldModel();
      } else {
        setWorldModel((WorldModel)value);
      }
      break;

    case CYCLE:
      if (value == null) {
        unsetCycle();
      } else {
        setCycle((Integer)value);
      }
      break;

    case UPDATE_TIME_LIMIT_MS:
      if (value == null) {
        unsetUpdateTimeLimitMs();
      } else {
        setUpdateTimeLimitMs((Integer)value);
      }
      break;

    case NEXT_WORLD_MODEL_TIME_ESTIMATE_MS:
      if (value == null) {
        unsetNextWorldModelTimeEstimateMs();
      } else {
        setNextWorldModelTimeEstimateMs((Integer)value);
      }
      break;

    case IS_MY_TURN:
      if (value == null) {
        unsetIsMyTurn();
      } else {
        setIsMyTurn((Boolean)value);
      }
      break;

    case GAME_RESULT:
      if (value == null) {
        unsetGameResult();
      } else {
        setGameResult((GameResult)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case GAME_STATUS:
      return getGameStatus();

    case WORLD_MODEL:
      return getWorldModel();

    case CYCLE:
      return Integer.valueOf(getCycle());

    case UPDATE_TIME_LIMIT_MS:
      return Integer.valueOf(getUpdateTimeLimitMs());

    case NEXT_WORLD_MODEL_TIME_ESTIMATE_MS:
      return Integer.valueOf(getNextWorldModelTimeEstimateMs());

    case IS_MY_TURN:
      return Boolean.valueOf(isIsMyTurn());

    case GAME_RESULT:
      return getGameResult();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case GAME_STATUS:
      return isSetGameStatus();
    case WORLD_MODEL:
      return isSetWorldModel();
    case CYCLE:
      return isSetCycle();
    case UPDATE_TIME_LIMIT_MS:
      return isSetUpdateTimeLimitMs();
    case NEXT_WORLD_MODEL_TIME_ESTIMATE_MS:
      return isSetNextWorldModelTimeEstimateMs();
    case IS_MY_TURN:
      return isSetIsMyTurn();
    case GAME_RESULT:
      return isSetGameResult();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof GameInfo)
      return this.equals((GameInfo)that);
    return false;
  }

  public boolean equals(GameInfo that) {
    if (that == null)
      return false;

    boolean this_present_gameStatus = true && this.isSetGameStatus();
    boolean that_present_gameStatus = true && that.isSetGameStatus();
    if (this_present_gameStatus || that_present_gameStatus) {
      if (!(this_present_gameStatus && that_present_gameStatus))
        return false;
      if (!this.gameStatus.equals(that.gameStatus))
        return false;
    }

    boolean this_present_worldModel = true && this.isSetWorldModel();
    boolean that_present_worldModel = true && that.isSetWorldModel();
    if (this_present_worldModel || that_present_worldModel) {
      if (!(this_present_worldModel && that_present_worldModel))
        return false;
      if (!this.worldModel.equals(that.worldModel))
        return false;
    }

    boolean this_present_cycle = true;
    boolean that_present_cycle = true;
    if (this_present_cycle || that_present_cycle) {
      if (!(this_present_cycle && that_present_cycle))
        return false;
      if (this.cycle != that.cycle)
        return false;
    }

    boolean this_present_updateTimeLimitMs = true;
    boolean that_present_updateTimeLimitMs = true;
    if (this_present_updateTimeLimitMs || that_present_updateTimeLimitMs) {
      if (!(this_present_updateTimeLimitMs && that_present_updateTimeLimitMs))
        return false;
      if (this.updateTimeLimitMs != that.updateTimeLimitMs)
        return false;
    }

    boolean this_present_nextWorldModelTimeEstimateMs = true;
    boolean that_present_nextWorldModelTimeEstimateMs = true;
    if (this_present_nextWorldModelTimeEstimateMs || that_present_nextWorldModelTimeEstimateMs) {
      if (!(this_present_nextWorldModelTimeEstimateMs && that_present_nextWorldModelTimeEstimateMs))
        return false;
      if (this.nextWorldModelTimeEstimateMs != that.nextWorldModelTimeEstimateMs)
        return false;
    }

    boolean this_present_isMyTurn = true;
    boolean that_present_isMyTurn = true;
    if (this_present_isMyTurn || that_present_isMyTurn) {
      if (!(this_present_isMyTurn && that_present_isMyTurn))
        return false;
      if (this.isMyTurn != that.isMyTurn)
        return false;
    }

    boolean this_present_gameResult = true && this.isSetGameResult();
    boolean that_present_gameResult = true && that.isSetGameResult();
    if (this_present_gameResult || that_present_gameResult) {
      if (!(this_present_gameResult && that_present_gameResult))
        return false;
      if (!this.gameResult.equals(that.gameResult))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_gameStatus = true && (isSetGameStatus());
    list.add(present_gameStatus);
    if (present_gameStatus)
      list.add(gameStatus.getValue());

    boolean present_worldModel = true && (isSetWorldModel());
    list.add(present_worldModel);
    if (present_worldModel)
      list.add(worldModel);

    boolean present_cycle = true;
    list.add(present_cycle);
    if (present_cycle)
      list.add(cycle);

    boolean present_updateTimeLimitMs = true;
    list.add(present_updateTimeLimitMs);
    if (present_updateTimeLimitMs)
      list.add(updateTimeLimitMs);

    boolean present_nextWorldModelTimeEstimateMs = true;
    list.add(present_nextWorldModelTimeEstimateMs);
    if (present_nextWorldModelTimeEstimateMs)
      list.add(nextWorldModelTimeEstimateMs);

    boolean present_isMyTurn = true;
    list.add(present_isMyTurn);
    if (present_isMyTurn)
      list.add(isMyTurn);

    boolean present_gameResult = true && (isSetGameResult());
    list.add(present_gameResult);
    if (present_gameResult)
      list.add(gameResult);

    return list.hashCode();
  }

  @Override
  public int compareTo(GameInfo other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetGameStatus()).compareTo(other.isSetGameStatus());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetGameStatus()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.gameStatus, other.gameStatus);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetWorldModel()).compareTo(other.isSetWorldModel());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetWorldModel()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.worldModel, other.worldModel);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCycle()).compareTo(other.isSetCycle());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCycle()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cycle, other.cycle);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUpdateTimeLimitMs()).compareTo(other.isSetUpdateTimeLimitMs());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUpdateTimeLimitMs()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.updateTimeLimitMs, other.updateTimeLimitMs);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetNextWorldModelTimeEstimateMs()).compareTo(other.isSetNextWorldModelTimeEstimateMs());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNextWorldModelTimeEstimateMs()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.nextWorldModelTimeEstimateMs, other.nextWorldModelTimeEstimateMs);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIsMyTurn()).compareTo(other.isSetIsMyTurn());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIsMyTurn()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.isMyTurn, other.isMyTurn);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetGameResult()).compareTo(other.isSetGameResult());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetGameResult()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.gameResult, other.gameResult);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("GameInfo(");
    boolean first = true;

    sb.append("gameStatus:");
    if (this.gameStatus == null) {
      sb.append("null");
    } else {
      sb.append(this.gameStatus);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("worldModel:");
    if (this.worldModel == null) {
      sb.append("null");
    } else {
      sb.append(this.worldModel);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("cycle:");
    sb.append(this.cycle);
    first = false;
    if (!first) sb.append(", ");
    sb.append("updateTimeLimitMs:");
    sb.append(this.updateTimeLimitMs);
    first = false;
    if (!first) sb.append(", ");
    sb.append("nextWorldModelTimeEstimateMs:");
    sb.append(this.nextWorldModelTimeEstimateMs);
    first = false;
    if (!first) sb.append(", ");
    sb.append("isMyTurn:");
    sb.append(this.isMyTurn);
    first = false;
    if (!first) sb.append(", ");
    sb.append("gameResult:");
    if (this.gameResult == null) {
      sb.append("null");
    } else {
      sb.append(this.gameResult);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (gameStatus == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'gameStatus' was not present! Struct: " + toString());
    }
    if (worldModel == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'worldModel' was not present! Struct: " + toString());
    }
    // alas, we cannot check 'cycle' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'updateTimeLimitMs' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'nextWorldModelTimeEstimateMs' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'isMyTurn' because it's a primitive and you chose the non-beans generator.
    if (gameResult == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'gameResult' was not present! Struct: " + toString());
    }
    // check for sub-struct validity
    if (worldModel != null) {
      worldModel.validate();
    }
    if (gameResult != null) {
      gameResult.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class GameInfoStandardSchemeFactory implements SchemeFactory {
    public GameInfoStandardScheme getScheme() {
      return new GameInfoStandardScheme();
    }
  }

  private static class GameInfoStandardScheme extends StandardScheme<GameInfo> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, GameInfo struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // GAME_STATUS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.gameStatus = GameStatus.findByValue(iprot.readI32());
              struct.setGameStatusIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // WORLD_MODEL
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.worldModel = new WorldModel();
              struct.worldModel.read(iprot);
              struct.setWorldModelIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // CYCLE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.cycle = iprot.readI32();
              struct.setCycleIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // UPDATE_TIME_LIMIT_MS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.updateTimeLimitMs = iprot.readI32();
              struct.setUpdateTimeLimitMsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // NEXT_WORLD_MODEL_TIME_ESTIMATE_MS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.nextWorldModelTimeEstimateMs = iprot.readI32();
              struct.setNextWorldModelTimeEstimateMsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // IS_MY_TURN
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.isMyTurn = iprot.readBool();
              struct.setIsMyTurnIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // GAME_RESULT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.gameResult = new GameResult();
              struct.gameResult.read(iprot);
              struct.setGameResultIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      if (!struct.isSetCycle()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'cycle' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetUpdateTimeLimitMs()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'updateTimeLimitMs' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetNextWorldModelTimeEstimateMs()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'nextWorldModelTimeEstimateMs' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetIsMyTurn()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'isMyTurn' was not found in serialized data! Struct: " + toString());
      }
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, GameInfo struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.gameStatus != null) {
        oprot.writeFieldBegin(GAME_STATUS_FIELD_DESC);
        oprot.writeI32(struct.gameStatus.getValue());
        oprot.writeFieldEnd();
      }
      if (struct.worldModel != null) {
        oprot.writeFieldBegin(WORLD_MODEL_FIELD_DESC);
        struct.worldModel.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(CYCLE_FIELD_DESC);
      oprot.writeI32(struct.cycle);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(UPDATE_TIME_LIMIT_MS_FIELD_DESC);
      oprot.writeI32(struct.updateTimeLimitMs);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(NEXT_WORLD_MODEL_TIME_ESTIMATE_MS_FIELD_DESC);
      oprot.writeI32(struct.nextWorldModelTimeEstimateMs);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(IS_MY_TURN_FIELD_DESC);
      oprot.writeBool(struct.isMyTurn);
      oprot.writeFieldEnd();
      if (struct.gameResult != null) {
        oprot.writeFieldBegin(GAME_RESULT_FIELD_DESC);
        struct.gameResult.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class GameInfoTupleSchemeFactory implements SchemeFactory {
    public GameInfoTupleScheme getScheme() {
      return new GameInfoTupleScheme();
    }
  }

  private static class GameInfoTupleScheme extends TupleScheme<GameInfo> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, GameInfo struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      oprot.writeI32(struct.gameStatus.getValue());
      struct.worldModel.write(oprot);
      oprot.writeI32(struct.cycle);
      oprot.writeI32(struct.updateTimeLimitMs);
      oprot.writeI32(struct.nextWorldModelTimeEstimateMs);
      oprot.writeBool(struct.isMyTurn);
      struct.gameResult.write(oprot);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, GameInfo struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.gameStatus = GameStatus.findByValue(iprot.readI32());
      struct.setGameStatusIsSet(true);
      struct.worldModel = new WorldModel();
      struct.worldModel.read(iprot);
      struct.setWorldModelIsSet(true);
      struct.cycle = iprot.readI32();
      struct.setCycleIsSet(true);
      struct.updateTimeLimitMs = iprot.readI32();
      struct.setUpdateTimeLimitMsIsSet(true);
      struct.nextWorldModelTimeEstimateMs = iprot.readI32();
      struct.setNextWorldModelTimeEstimateMsIsSet(true);
      struct.isMyTurn = iprot.readBool();
      struct.setIsMyTurnIsSet(true);
      struct.gameResult = new GameResult();
      struct.gameResult.read(iprot);
      struct.setGameResultIsSet(true);
    }
  }

}

